import type { LanguageLevel, ExerciseType } from '@/lib/constants';

export interface BaseExercise {
  id: string;
  type: ExerciseType;
  question: string;
  explanation?: string; // Explanation for the correct answer or general concept
}

export interface MultipleChoiceExercise extends BaseExercise {
  type: 'multiple_choice';
  options: string[];
  correctAnswer: string;
}

export interface TranslationExercise extends BaseExercise {
  type: 'translation';
  prompt: string; // Sentence/phrase to translate
  languageDirection: 'to_german' | 'from_german';
  correctAnswer: string; // The correct translation
}

export interface FillInTheBlankExercise extends BaseExercise {
  type: 'fill_in_the_blank';
  sentenceParts: string[]; // e.g., ["Das ist ", " Haus."] for "Das ist ___ Haus."
  correctAnswer: string; // The word(s) that fill the blank
}

export interface ListeningComprehensionExercise extends BaseExercise {
  type: 'listening_comprehension';
  // Typically, questions related to an audio clip will be multiple choice or short answer.
  // For simplicity, let's assume it's a multiple choice question related to audio.
  options?: string[]; // Optional if it's a different format like short answer
  correctAnswer: string;
}

export type Exercise =
  | MultipleChoiceExercise
  | TranslationExercise
  | FillInTheBlankExercise
  | ListeningComprehensionExercise;

export interface VocabularyItem {
  german: string;
  russian: string;
  example?: string; // Example sentence in German
}

export interface Lesson {
  id: string;
  level: LanguageLevel;
  topic: string;
  theory: string;
  audio?: string; // URL to audio file
  transcript?: string;
  exercises: Exercise[];
  vocabulary?: VocabularyItem[]; // Words to learn for this lesson
  aiGeneratedExercises?: Exercise[]; // Exercises generated by AI based on audio
}

export interface Test {
  id: string;
  level: LanguageLevel;
  topic: string; // Topic this test covers, could be related to one or more lessons
  questions: Exercise[]; // Array of exercises serving as test questions
}

export interface ExerciseAttempt {
  correctStreak: number;
  lastScore: number; // 0-100. For a single exercise question, this is 100 if correct, 0 if not.
  attemptsCount: number;
  mastered: boolean; // True if correctStreak >= 3 and lastScore >= 90
}

export interface UserProgress {
  currentLevel: LanguageLevel | null;
  completedLessons: string[]; // Array of lesson IDs
  testResults: Record<string, { score: number; date: string }>; // testId: { score, date }
  exerciseAttempts: Record<string, ExerciseAttempt>; // exerciseId: attemptData
  learningGoals: string; // User's stated learning goals
  lastActivity: string | null; // ISO date string
}

export interface AudioMaterial {
  id: string;
  title: string;
  src: string;
  transcript: string;
  level: LanguageLevel;
}
